require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe EnquiriesController do

  # This should return the minimal set of attributes required to create a valid
  # enquiry. As you add validations to enquiry, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  describe "GET index" #do
#    it "assigns all Enquiries as @Enquiries" do
#      enquiry = Enquiry.create! valid_attributes
#      get :index
#      assigns(:enquiries).should eq([enquiry])
#    end
#  end
#
#  describe "GET show" do
#    it "assigns the requested Enquiry as @Enquiry" do
#      enquiry = Enquiry.create! valid_attributes
#      get :show, :id => enquiry.id.to_s
#      assigns(:enquiry).should eq(enquiry)
#    end
#  end
#
#  describe "GET new" do
#    it "assigns a new enquiry as @enquiry" do
#      get :new
#      assigns(:enquiry).should be_a_new(enquiry)
#    end
#  end
#
#  describe "GET edit" do
#    it "assigns the requested enquiry as @enquiry" do
#      enquiry = Enquiry.create! valid_attributes
#      get :edit, :id => Enquiry.id.to_s
#      assigns(:enquiry).should eq(enquiry)
#    end
#  end
#
#  describe "POST create" do
#    describe "with valid params" do
#      it "creates a new Enquiry" do
#        expect {
#          post :create, :enquiry => valid_attributes
#        }.to change(enquiry, :count).by(1)
#      end
#
#      it "assigns a newly created Enquiry as @Enquiry" do
#        post :create, :enquiry => valid_attributes
#        assigns(:enquiry).should be_a(enquiry)
#        assigns(:enquiry).should be_persisted
#      end
#
#      it "redirects to the created Enquiry" do
#        post :create, :enquiry => valid_attributes
#        response.should redirect_to(enquiry.last)
#      end
#    end
#
#    describe "with invalid params" do
#      it "assigns a newly created but unsaved Enquiry as @enquiry" do
#        # Trigger the behavior that occurs when invalid params are submitted
#        enquiry.any_instance.stub(:save).and_return(false)
#        post :create, :enquiry => {}
#        assigns(:enquiry).should be_a_new(enquiry)
#      end
#
#      it "re-renders the 'new' template" do
#        # Trigger the behavior that occurs when invalid params are submitted
#        enquiry.any_instance.stub(:save).and_return(false)
#        post :create, :Enquiry => {}
#        response.should render_template("new")
#      end
#    end
#  end
#
#  describe "PUT update" do
#
#
#    describe "with invalid params" do
#      it "assigns the Enquiry as @Enquiry" do
#        enquiry = Enquiry.create! valid_attributes
#        # Trigger the behavior that occurs when invalid params are submitted
#        Enquiry.any_instance.stub(:save).and_return(false)
#        put :update, :id => enquiry.id.to_s, :enquiry => {}
#        assigns(:enquiry).should eq(enquiry)
#      end
#
#      it "re-renders the 'edit' template" do
#        enquiry = Enquiry.create! valid_attributes
#        # Trigger the behavior that occurs when invalid params are submitted
#        Enquiry.any_instance.stub(:save).and_return(false)
#        put :update, :id => enquiry.id.to_s, :enquiry => {}
#        response.should render_template("edit")
#      end
#    end
#  end
#
#

end
